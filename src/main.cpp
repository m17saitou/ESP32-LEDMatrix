#include <Arduino.h>
// シフトレジスタへの電源供給は3.3Vで行う

void setup() {
    // put your setup code here, to run once:
    pinMode(21, OUTPUT);  // RCK
    pinMode(22, OUTPUT);  // SCK
    pinMode(23, OUTPUT);  // SER
    pinMode(19, OUTPUT);  // RCK_2
    pinMode(18, OUTPUT);  // SCK_2
    pinMode(17, OUTPUT);  // SER_2
}
const int char_cnt = 5 + 9;
uint16_t pattern[char_cnt][16] = {
    {
        0,
    },
    {
        0,
    },
    {
        0,
    },
    {0b0000100000100000,
     0b0000100000100000,
     0b0000100000100000,
     0b0000100111111100,
     0b0010110000100100,
     0b0010101000100100,
     0b0010101000100100,
     0b0010100000100100,
     0b0100101111111111,
     0b0000100000100000,
     0b0000100001010000,
     0b0000100001010000,
     0b0000100010001000,
     0b0000100010001000,
     0b0000100100000100,
     0b0000101000000010},
    {0b0000000000100000,
     0b0010000000100000,
     0b0001011111111111,
     0b0001000000100000,
     0b0000000000100000,
     0b0000001111111110,
     0b0000001000100010,
     0b0111101000100010,
     0b0000101111111110,
     0b0000100001110000,
     0b0000100010101000,
     0b0000100100100100,
     0b0000111000100011,
     0b0001010000100000,
     0b0010001100000000,
     0b0100000011111111},
    {0b0000000100000000,
     0b0000000100000000,
     0b0111111111111110,
     0b0100001000000010,
     0b0100001000000010,
     0b0000001000000000,
     0b0000001000000000,
     0b0111111111111110,
     0b0000010001000000,
     0b0000010001000000,
     0b0000100001000000,
     0b0000111001000000,
     0b0000000110000000,
     0b0000001001100000,
     0b0000110000010000,
     0b0011000000001000},
    {0b0000001000010000,
     0b0000001000010000,
     0b0111111111111111,
     0b0000001000010000,
     0b0000001000010000,
     0b0000000000000000,
     0b0001111111111100,
     0b0000000000000000,
     0b0000000000000000,
     0b0111111111111111,
     0b0000000100000000,
     0b0000000100100000,
     0b0000001000010000,
     0b0000010011111000,
     0b0011111100000100,
     0b0000000000000100},
    {0b0000000001000000,
     0b0011111001000000,
     0b0010001001111100,
     0b0010001001000100,
     0b0010001011001000,
     0b0011111010101000,
     0b0000100100010000,
     0b0010100000101000,
     0b0010100001000100,
     0b0010111010000010,
     0b0010100101111101,
     0b0010100001000100,
     0b0010100101000100,
     0b0010111001000100,
     0b0011100001111100,
     0b0110000000000000},
    {0b0000000000000000,
     0b0000000000000000,
     0b0001111111111000,
     0b0000000000000000,
     0b0000000000000000,
     0b0000000000000000,
     0b0011111111111100,
     0b0000000000000100,
     0b0000000000000100,
     0b0000000000001000,
     0b0000000000001000,
     0b0000000000010000,
     0b0000000001100000,
     0b0000000110000000,
     0b0000111000000000,
     0b0000000000000000},
    {0b0000000000000000,
     0b0000000000010000,
     0b0000000000010000,
     0b0000000000100000,
     0b0000000001000000,
     0b0000000010000000,
     0b0000001110000000,
     0b0000110010000000,
     0b0011000010000000,
     0b0000000010000000,
     0b0000000010000000,
     0b0000000010000000,
     0b0000000010000000,
     0b0000000010000000,
     0b0000000010000000,
     0b0000000000000000},
    {0b0000000000000000,
     0b0000000001000000,
     0b0000000001000000,
     0b0000000001000000,
     0b0000000001000000,
     0b0011111111111110,
     0b0000000001000000,
     0b0000000001000000,
     0b0000000001000000,
     0b0000000001000000,
     0b0000000001000000,
     0b0000000010000000,
     0b0000000010000000,
     0b0000001100000000,
     0b0000110000000000,
     0b0000000000000000},
    {0b0000000000000000,
     0b0000000000000000,
     0b0000000000000000,
     0b0000000000000000,
     0b0000000000000000,
     0b0000000000000000,
     0b0000000000000000,
     0b0111111111111111,
     0b0000000000000000,
     0b0000000000000000,
     0b0000000000000000,
     0b0000000000000000,
     0b0000000000000000,
     0b0000000000000000,
     0b0000000000000000,
     0b0000000000000000},
    {
        0,
    },
    {
        0,
    }};
uint16_t display_pat[3][16] = {
    {0b0000000000000000,
     0b0000000000000000,
     0b0000000001111110,
     0b0000000000010000,
     0b0000000000010000,
     0b0000000000010001,
     0b0000000000010010,
     0b0000000001111100,
     0b0000000000010001,
     0b0000000000010000,
     0b0000000000010000,
     0b0000000000010001,
     0b0000000000011110,
     0b0000000001110000,
     0b0000000000000000,
     0b0000000000000001},
    {0b0010000000000000,
     0b0010000000000000,
     0b0101000000011111,
     0b0101000000000000,
     0b1000100000000000,
     0b0001010000000000,
     0b0010001001111111,
     0b0100010100000000,
     0b1000100000001000,
     0b0001000000001000,
     0b0110001000001000,
     0b1000010000001000,
     0b0000100000010100,
     0b0001000000010010,
     0b0110000000100001,
     0b1000000001000000},
    {0b1000000000000000,
     0b1000000000000000,
     0b1111110000000000,
     0b1000000000000000,
     0b1000000000000000,
     0b1000000000000000,
     0b1111111100000000,
     0b1000000000000000,
     0b1000000000000000,
     0b1000000000000000,
     0b1111110000000000,
     0b1000000000000000,
     0b1000000000000000,
     0b1000000000000000,
     0b1100000000000000,
     0b0011111000000000}};
int keeptimes = 12;  // 数値を小さくするとスクロールが早くなる
void scrolling();
void staticDisplay();
void allEnable();
void loop() {
    // put your main code here, to run repeatedly:
    // scrolling();
    staticDisplay();
}
void scrolling() {
    for (int col = 0; col < 16 * (char_cnt - 2); col++) {
        for (int ch = 0; ch < 3; ch++) {
            for (int row = 0; row < 16; row++) {
                display_pat[ch][row] = (pattern[ch + col / 16][row] << (col % 16)) + (pattern[ch + 1 + col / 16][row] >> (16 - (col % 16)));
            }
        }

        for (int cnt = 0; cnt < keeptimes; cnt++) {
            for (int anode = 0; anode < 16; anode++) {
                delayMicroseconds(300);

                digitalWrite(23, LOW);
                for (int i = 0; i < 6; i++) shiftOut(21, 22, LSBFIRST, 0);  // 一度全部0を突っ込むと残像が出ない
                digitalWrite(23, HIGH);

                digitalWrite(19, LOW);
                uint16_t itr = 0b1000000000000000 >> anode;
                shiftOut(17, 18, LSBFIRST, ~itr);
                shiftOut(17, 18, LSBFIRST, (~itr >> 8));
                digitalWrite(19, HIGH);

                digitalWrite(23, LOW);
                for (int i = 0; i < 3; i++) {
                    shiftOut(21, 22, LSBFIRST, display_pat[i][anode] >> 8);
                    shiftOut(21, 22, LSBFIRST, display_pat[i][anode]);
                }
                digitalWrite(23, HIGH);

                // delayMicroseconds(100);
            }
        }
    }
}
void staticDisplay() {
    for (int anode = 0; anode < 16; anode++) {
        delayMicroseconds(300);

        digitalWrite(23, LOW);
        for (int i = 0; i < 6; i++) shiftOut(21, 22, LSBFIRST, 0);  // 一度全部0を突っ込むと残像が出ない
        digitalWrite(23, HIGH);

        digitalWrite(19, LOW);
        uint16_t itr = 0b1000000000000000 >> anode;
        shiftOut(17, 18, LSBFIRST, ~itr);
        shiftOut(17, 18, LSBFIRST, (~itr >> 8));
        digitalWrite(19, HIGH);

        digitalWrite(23, LOW);
        for (int i = 0; i < 3; i++) {
            shiftOut(21, 22, LSBFIRST, display_pat[i][anode] >> 8);
            shiftOut(21, 22, LSBFIRST, display_pat[i][anode]);
        }
        digitalWrite(23, HIGH);

        delayMicroseconds(100);
    }
}
void allEnable() {
    digitalWrite(23, LOW);  // 全点灯
    shiftOut(21, 22, MSBFIRST, 0b11111111);
    shiftOut(21, 22, MSBFIRST, 0b11111111);
    digitalWrite(23, HIGH);
}